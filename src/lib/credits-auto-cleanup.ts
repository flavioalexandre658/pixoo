import { CreditsCleanupService } from "@/services/credits/credits-cleanup.service";

/**
 * Sistema de limpeza autom√°tica de cr√©ditos
 * Executa em background sem interferir na l√≥gica principal
 */
export class CreditsAutoCleanup {
  private static instance: CreditsAutoCleanup | null = null;
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning = false;
  private readonly INTERVAL_MS = 10 * 60 * 1000; // 10 minutos

  private constructor() {}

  static getInstance(): CreditsAutoCleanup {
    if (!this.instance) {
      this.instance = new CreditsAutoCleanup();
    }
    return this.instance;
  }

  /**
   * Inicia a limpeza autom√°tica peri√≥dica
   */
  start(): void {
    if (this.isRunning) {
      console.log("üîÑ Limpeza autom√°tica de cr√©ditos j√° est√° em execu√ß√£o");
      return;
    }

    console.log(`üöÄ Iniciando limpeza autom√°tica de cr√©ditos (intervalo: ${this.INTERVAL_MS / 1000}s)`);
    
    this.isRunning = true;
    
    // Executar uma limpeza inicial ap√≥s 30 segundos
    setTimeout(() => {
      this.runCleanup();
    }, 30000);

    // Configurar intervalo regular
    this.intervalId = setInterval(() => {
      this.runCleanup();
    }, this.INTERVAL_MS);
  }

  /**
   * Para a limpeza autom√°tica
   */
  stop(): void {
    if (!this.isRunning) {
      console.log("‚èπÔ∏è Limpeza autom√°tica de cr√©ditos j√° est√° parada");
      return;
    }

    console.log("‚èπÔ∏è Parando limpeza autom√°tica de cr√©ditos");
    
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    
    this.isRunning = false;
  }

  /**
   * Executa uma limpeza (com prote√ß√£o contra erros)
   */
  private async runCleanup(): Promise<void> {
    try {
      console.log(`üßπ Executando limpeza autom√°tica: ${new Date().toISOString()}`);
      
      const result = await CreditsCleanupService.conditionalCleanup();
      
      if (result.executed && result.result) {
        const { expired, deleted, errors } = result.result;
        console.log(`‚úÖ Limpeza autom√°tica conclu√≠da: ${expired} expiradas, ${deleted} deletadas${errors.length > 0 ? `, ${errors.length} erros` : ''}`);
        
        if (errors.length > 0) {
          console.warn(`‚ö†Ô∏è Erros na limpeza autom√°tica:`, errors);
        }
      } else {
        console.log(`‚è≠Ô∏è Limpeza autom√°tica pulada (throttling)`);
      }
    } catch (error) {
      console.error(`‚ùå Erro na limpeza autom√°tica:`, {
        error: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toISOString()
      });
      // N√£o parar o servi√ßo por causa de um erro
    }
  }

  /**
   * For√ßa uma limpeza imediata (ignora throttling)
   */
  async forceCleanup(): Promise<{
    expired: number;
    deleted: number;
    errors: string[];
  }> {
    console.log(`üîß For√ßando limpeza imediata de cr√©ditos`);
    return await CreditsCleanupService.fullCleanup();
  }

  /**
   * Obt√©m o status do servi√ßo
   */
  getStatus(): {
    isRunning: boolean;
    intervalMs: number;
    nextCleanupEstimate?: Date;
  } {
    const status = {
      isRunning: this.isRunning,
      intervalMs: this.INTERVAL_MS
    };

    if (this.isRunning) {
      // Estimar pr√≥xima limpeza (aproximado)
      return {
        ...status,
        nextCleanupEstimate: new Date(Date.now() + this.INTERVAL_MS)
      };
    }

    return status;
  }

  /**
   * Obt√©m estat√≠sticas das reservas
   */
  async getStats(): Promise<{
    pending: number;
    confirmed: number;
    cancelled: number;
    expired: number;
  }> {
    return await CreditsCleanupService.getReservationStats();
  }
}

// Inst√¢ncia singleton para uso global
export const creditsAutoCleanup = CreditsAutoCleanup.getInstance();

// Auto-iniciar em produ√ß√£o (apenas no servidor)
if (typeof window === 'undefined' && process.env.NODE_ENV === 'production') {
  // Aguardar um pouco antes de iniciar para evitar problemas de inicializa√ß√£o
  setTimeout(() => {
    creditsAutoCleanup.start();
  }, 5000);
}