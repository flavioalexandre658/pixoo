import { CreditsCleanupService } from '@/services/credits/credits-cleanup.service';

/**
 * Sistema de limpeza autom√°tica de cr√©ditos
 * Gerencia a limpeza autom√°tica em background
 */
class CreditsAutoCleanup {
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning = false;
  private readonly intervalMs = 5 * 60 * 1000; // 5 minutos

  /**
   * Inicia a limpeza autom√°tica
   */
  start(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Limpeza autom√°tica j√° est√° rodando');
      return;
    }

    this.intervalId = setInterval(async () => {
      try {
        await CreditsCleanupService.conditionalCleanup();
      } catch (error) {
        console.error('‚ùå Erro na limpeza autom√°tica:', error);
      }
    }, this.intervalMs);

    this.isRunning = true;
    console.log('‚úÖ Limpeza autom√°tica iniciada');
  }

  /**
   * Para a limpeza autom√°tica
   */
  stop(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    this.isRunning = false;
    console.log('üõë Limpeza autom√°tica parada');
  }

  /**
   * For√ßa uma limpeza imediata
   */
  async forceCleanup() {
    return await CreditsCleanupService.fullCleanup();
  }

  /**
   * Obt√©m o status atual
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      intervalMs: this.intervalMs,
      nextCleanupIn: this.isRunning ? this.intervalMs : null
    };
  }

  /**
   * Obt√©m estat√≠sticas
   */
  async getStats() {
    return await CreditsCleanupService.getReservationStats();
  }
}

// Inst√¢ncia singleton
export const creditsAutoCleanup = new CreditsAutoCleanup();